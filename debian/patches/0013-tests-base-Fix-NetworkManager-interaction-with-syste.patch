From: =?utf-8?q?Lukas_M=C3=A4rdian?= <slyon@ubuntu.com>
Date: Mon, 10 Jul 2023 12:43:22 +0200
Subject: tests:base: Fix NetworkManager interaction with systemd v253
 (Closes: #1039071)

Bug: https://github.com/canonical/netplan/pull/377
Origin: https://github.com/canonical/netplan/pull/377/commits/558eeb3605f20a975f717c801b49e9316e6162eb

Starting with the systemd v253 update NetworkManager started taking
implicit control of certain interfaces, blocking itself (after a restart)
from managing those interface through its configure netplan-* connection
profile.

https://bugs.debian.org/1039071
---
 tests/integration/base.py | 32 ++++++++++++++++++++++----------
 1 file changed, 22 insertions(+), 10 deletions(-)

diff --git a/tests/integration/base.py b/tests/integration/base.py
index 0c62a24..dad2d62 100644
--- a/tests/integration/base.py
+++ b/tests/integration/base.py
@@ -76,6 +76,9 @@ class IntegrationTestsBase(unittest.TestCase):
             f.write('[keyfile]\nunmanaged-devices=interface-name:en*,eth0,nptestsrv')
         subprocess.check_call(['netplan', 'apply'])
         subprocess.call(['/lib/systemd/systemd-networkd-wait-online', '--quiet', '--timeout=30'])
+        if klass.is_active('NetworkManager.service'):
+            subprocess.check_call(['nm-online', '-s'])
+            subprocess.check_call(['nmcli', 'general', 'reload'])
 
     @classmethod
     def tearDownClass(klass):
@@ -115,19 +118,29 @@ class IntegrationTestsBase(unittest.TestCase):
         if os.path.exists('/sys/class/net/eth42'):
             raise SystemError('eth42 interface already exists')
 
-        # create virtual ethernet devs
-        subprocess.check_call(['ip', 'link', 'add', 'name', 'eth42', 'type',
-                               'veth', 'peer', 'name', 'veth42'])
         klass.dev_e_ap = 'veth42'
         klass.dev_e_client = 'eth42'
         klass.dev_e_ap_ip4 = '192.168.5.1/24'
         klass.dev_e_ap_ip6 = '2600::1/64'
-        subprocess.check_call(['ip', 'link', 'add', 'name', 'eth43', 'type',
-                               'veth', 'peer', 'name', 'veth43'])
+
         klass.dev_e2_ap = 'veth43'
         klass.dev_e2_client = 'eth43'
         klass.dev_e2_ap_ip4 = '192.168.6.1/24'
         klass.dev_e2_ap_ip6 = '2601::1/64'
+
+        # don't let NM trample over our test routers
+        with open('/etc/NetworkManager/conf.d/99-test-denylist.conf', 'w') as f:
+            f.write('[keyfile]\nunmanaged-devices+=%s,%s\n' % (klass.dev_e_ap, klass.dev_e2_ap))
+        if klass.is_active('NetworkManager.service'):
+            subprocess.check_call(['nm-online', '-s'])
+            subprocess.check_call(['nmcli', 'general', 'reload'])
+
+        # create virtual ethernet devs
+        subprocess.check_call(['ip', 'link', 'add', 'name', 'eth42', 'type',
+                               'veth', 'peer', 'name', 'veth42'])
+        subprocess.check_call(['ip', 'link', 'add', 'name', 'eth43', 'type',
+                               'veth', 'peer', 'name', 'veth43'])
+
         # Creation of the veths introduces a race with newer versions of
         # systemd, as it  will change the initial MAC address after the device
         # was created and networkd took control. Give it some time, so we read
@@ -140,10 +153,6 @@ class IntegrationTestsBase(unittest.TestCase):
                                       text=True)
         klass.dev_e2_client_mac = out.split()[2]
 
-        # don't let NM trample over our test routers
-        with open('/etc/NetworkManager/conf.d/99-test-denylist.conf', 'w') as f:
-            f.write('[keyfile]\nunmanaged-devices+=%s,%s\n' % (klass.dev_e_ap, klass.dev_e2_ap))
-
     @classmethod
     def shutdown_devices(klass):
         '''Remove test devices'''
@@ -322,7 +331,10 @@ class IntegrationTestsBase(unittest.TestCase):
         if 'Run \'systemctl daemon-reload\' to reload units.' in out:
             self.fail('systemd units changed without reload')
         # start NM so that we can verify that it does not manage anything
-        subprocess.check_call(['systemctl', 'start', 'NetworkManager.service'])
+        subprocess.call(['nm-online', '-sxq'])  # Wait for NM startup, from 'netplan apply'
+        if not self.is_active('NetworkManager.service'):
+            subprocess.check_call(['systemctl', 'start', 'NetworkManager.service'])
+            subprocess.call(['nm-online', '-sq'])
 
         # Debugging output
         # out = subprocess.check_output(['NetworkManager', '--print-config'], text=True)
