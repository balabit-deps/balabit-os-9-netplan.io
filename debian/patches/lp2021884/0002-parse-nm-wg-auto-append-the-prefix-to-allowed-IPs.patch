From: Danilo Egea Gondolfo <danilo.egea.gondolfo@canonical.com>
Date: Wed, 7 Jun 2023 16:08:00 +0100
Subject: parse-nm:wg: auto append the prefix to allowed IPs

Bug: https://bugs.launchpad.net/ubuntu/+source/netplan.io/+bug/2021884
Origin: https://github.com/canonical/netplan/commit/b75c6faeadd

Network Manager doesn't fail if an IP in the allowed-ips list doesn't
have a prefix. In this case, WG will default to /32.

As the WG's documentation says the prefix must be used, Netplan will
fail the validation step if it's not present. To be able to parse a
keyfile and generate a YAML that will not fail validation, let's append
a /32 automatically to the value if it doesn't have a prefix defined by
the user.
---
 src/parse-nm.c               | 13 ++++++++++++-
 tests/parser/test_keyfile.py | 41 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 53 insertions(+), 1 deletion(-)

diff --git a/src/parse-nm.c b/src/parse-nm.c
index e863fea..dcd71c5 100644
--- a/src/parse-nm.c
+++ b/src/parse-nm.c
@@ -511,7 +511,18 @@ parse_tunnels(GKeyFile* kf, NetplanNetDefinition* nd)
                     for (int i = 0; allowed_ips_split[i] != NULL; i++) {
                         gchar* ip = allowed_ips_split[i];
                         if (g_strcmp0(ip, "")) {
-                            gchar* address = g_strdup(ip);
+                            gchar* address = NULL;
+                            /*
+                             * NM doesn't care if the prefix was omitted.
+                             * Even though the WG manual says it requires the prefix,
+                             * if it's omitted in its config file it will default to /32
+                             * so we should do the same here and append a /32 if it's not present,
+                             * otherwise we will generate a YAML that will fail validation.
+                             */
+                            if (!g_strrstr(ip, "/"))
+                                address = g_strdup_printf("%s/32", ip);
+                            else
+                                address = g_strdup(ip);
                             g_array_append_val(wireguard_peer->allowed_ips, address);
                         }
                     }
diff --git a/tests/parser/test_keyfile.py b/tests/parser/test_keyfile.py
index 8b7bfe2..a4ebd94 100644
--- a/tests/parser/test_keyfile.py
+++ b/tests/parser/test_keyfile.py
@@ -1578,6 +1578,47 @@ method=auto\n'''.format(UUID))
           connection.interface-name: "wg0"
 '''.format(UUID, UUID)})
 
+    def test_wireguard_allowed_ips_without_prefix(self):
+        '''
+        When the IP prefix is not present we should default to /32
+        '''
+        self.generate_from_keyfile('''[connection]
+id=wg0
+type=wireguard
+uuid={}
+interface-name=wg0
+
+[wireguard]
+private-key=aPUcp5vHz8yMLrzk8SsDyYnV33IhE/k20e52iKJFV0A=
+
+[wireguard-peer.cwkb7k0xDgLSnunZpFIjLJw4u+mJDDr+aBR5DqzpmgI=]
+endpoint=1.2.3.4:12345
+allowed-ips=192.168.0.10
+
+[ipv4]
+method=auto\n'''.format(UUID), regenerate=False)
+        self.assert_netplan({UUID: '''network:
+  version: 2
+  tunnels:
+    NM-{}:
+      renderer: NetworkManager
+      dhcp4: true
+      mode: "wireguard"
+      keys:
+        private: "aPUcp5vHz8yMLrzk8SsDyYnV33IhE/k20e52iKJFV0A="
+      peers:
+      - endpoint: "1.2.3.4:12345"
+        keys:
+          public: "cwkb7k0xDgLSnunZpFIjLJw4u+mJDDr+aBR5DqzpmgI="
+        allowed-ips:
+        - "192.168.0.10/32"
+      networkmanager:
+        uuid: "{}"
+        name: "wg0"
+        passthrough:
+          connection.interface-name: "wg0"
+'''.format(UUID, UUID)})
+
     def test_wireguard_with_key_and_peer_without_allowed_ips(self):
         self.generate_from_keyfile('''[connection]
 id=wg0
