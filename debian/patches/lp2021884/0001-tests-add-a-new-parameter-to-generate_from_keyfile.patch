From: Danilo Egea Gondolfo <danilo.egea.gondolfo@canonical.com>
Date: Wed, 7 Jun 2023 16:04:33 +0100
Subject: tests: add a new parameter to generate_from_keyfile

Bug: https://bugs.launchpad.net/ubuntu/+source/netplan.io/+bug/2021884
Origin: https://github.com/canonical/netplan/commit/6619656c034

The parameter "regenerate" enable the caller to check or not if the
regenerated keyfile matches the input.

This will be used by tests that parse keyfiles with implicit
configuration. In this cases, the regenerated file will include this
configuration and will not match the input. For example, the Wireguard
property allowed-ips accept IPs without a prefix, but the prefix /32 is
implicitly used as it is required by Wireguard.
---
 tests/parser/base.py | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/tests/parser/base.py b/tests/parser/base.py
index 167547f..5ed4388 100644
--- a/tests/parser/base.py
+++ b/tests/parser/base.py
@@ -76,7 +76,7 @@ class TestKeyfileBase(unittest.TestCase):
         shutil.rmtree(self.workdir.name)
         super().tearDown()
 
-    def generate_from_keyfile(self, keyfile, netdef_id=None, expect_fail=False, filename=None):
+    def generate_from_keyfile(self, keyfile, netdef_id=None, expect_fail=False, filename=None, regenerate=True):
         '''Call libnetplan with given keyfile string as configuration'''
         err = ctypes.POINTER(_GError)()
         # Autodetect default 'NM-<UUID>' netdef-id
@@ -121,7 +121,8 @@ class TestKeyfileBase(unittest.TestCase):
                 lib._write_netplan_conf(netdef_id.encode(), self.workdir.name.encode())
                 lib.netplan_clear_netdefs()
                 # check re-generated keyfile
-                self.assert_nm_regenerate({generated_file: keyfile})
+                if regenerate:
+                    self.assert_nm_regenerate({generated_file: keyfile})
             with open(outf.name, 'r') as f:
                 output = f.read().strip()  # output from stderr (fd=2) on C/library level
                 return output
