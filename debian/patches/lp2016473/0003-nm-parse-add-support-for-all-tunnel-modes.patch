From: Danilo Egea Gondolfo <danilo.egea.gondolfo@canonical.com>
Date: Thu, 18 May 2023 11:41:13 +0100
Subject: nm-parse: add support for all tunnel modes

Bug: https://bugs.launchpad.net/netplan/+bug/2016473
Origin: https://github.com/canonical/netplan/commit/46723c8

Sync the enum NetplanTunnelMode with the tunnel modes supported by
Network Manager.
---
 src/abi.h        | 11 ++++++-----
 src/names.c      |  2 +-
 src/nm.c         |  2 +-
 src/parse-nm.c   | 55 +++++++++++++++++++++++++++++++++++++++++++++----------
 src/validation.c |  7 -------
 5 files changed, 53 insertions(+), 24 deletions(-)

diff --git a/src/abi.h b/src/abi.h
index b98a307..eb78960 100644
--- a/src/abi.h
+++ b/src/abi.h
@@ -91,12 +91,13 @@ typedef enum {
     NETPLAN_TUNNEL_MODE_IPIP6       = 7,
     NETPLAN_TUNNEL_MODE_IP6GRE      = 8,
     NETPLAN_TUNNEL_MODE_VTI6        = 9,
-    NETPLAN_TUNNEL_MODE_VXLAN       = 10,
+    NETPLAN_TUNNEL_MODE_GRETAP      = 10,
+    NETPLAN_TUNNEL_MODE_IP6GRETAP   = 11,
+    /* "ip-tunnel" modes supported by Network Manager end here */
+    NETPLAN_TUNNEL_MODE_NM_MAX      = 12,
 
-    /* systemd-only, apparently? */
-    NETPLAN_TUNNEL_MODE_GRETAP      = 101,
-    NETPLAN_TUNNEL_MODE_IP6GRETAP   = 102,
-    NETPLAN_TUNNEL_MODE_WIREGUARD   = 103,
+    NETPLAN_TUNNEL_MODE_VXLAN       = 100,
+    NETPLAN_TUNNEL_MODE_WIREGUARD   = 101,
 
     NETPLAN_TUNNEL_MODE_MAX_,
 } NetplanTunnelMode;
diff --git a/src/names.c b/src/names.c
index 44b0a57..f1113f5 100644
--- a/src/names.c
+++ b/src/names.c
@@ -81,9 +81,9 @@ netplan_tunnel_mode_to_str[NETPLAN_TUNNEL_MODE_MAX_] = {
     [NETPLAN_TUNNEL_MODE_IPIP6] = "ipip6",
     [NETPLAN_TUNNEL_MODE_IP6GRE] = "ip6gre",
     [NETPLAN_TUNNEL_MODE_VTI6] = "vti6",
-    [NETPLAN_TUNNEL_MODE_VXLAN] = "vxlan",
     [NETPLAN_TUNNEL_MODE_GRETAP] = "gretap",
     [NETPLAN_TUNNEL_MODE_IP6GRETAP] = "ip6gretap",
+    [NETPLAN_TUNNEL_MODE_VXLAN] = "vxlan",
     [NETPLAN_TUNNEL_MODE_WIREGUARD] = "wireguard",
 };
 
diff --git a/src/nm.c b/src/nm.c
index edc9128..10a9520 100644
--- a/src/nm.c
+++ b/src/nm.c
@@ -511,7 +511,7 @@ write_vxlan_parameters(const NetplanNetDefinition* def, GKeyFile* kf)
         }
     }
 
-    if (def->vxlan->checksums || def->vxlan->extensions || def->vxlan->flow_label != G_MAXUINT || def->vxlan->do_not_fragment)
+    if (def->vxlan->checksums || def->vxlan->extensions || def->vxlan->flow_label != G_MAXUINT || def->vxlan->do_not_fragment != NETPLAN_TRISTATE_UNSET)
         g_warning("%s: checksums/extensions/flow-lable/do-not-fragment are not supported by NetworkManager\n", def->id);
 }
 
diff --git a/src/parse-nm.c b/src/parse-nm.c
index 3ba8f09..dfb84df 100644
--- a/src/parse-nm.c
+++ b/src/parse-nm.c
@@ -51,8 +51,9 @@ type_from_str(const char* type_str)
     else if (!g_strcmp0(type_str, "vlan"))
         return NETPLAN_DEF_TYPE_VLAN;
     */
-    /* TODO: Tunnels are partially supported by the keyfile parser */
-    else if (!g_strcmp0(type_str, "wireguard"))
+    else if (   !g_strcmp0(type_str, "wireguard")
+             || !g_strcmp0(type_str, "vxlan")
+             || !g_strcmp0(type_str, "ip-tunnel"))
         return NETPLAN_DEF_TYPE_TUNNEL;
     /* Unsupported type, needs to be specified via passthrough */
     return NETPLAN_DEF_TYPE_NM;
@@ -76,6 +77,9 @@ tunnel_mode_from_str(const char* type_str)
 {
     if (!g_strcmp0(type_str, "wireguard"))
         return NETPLAN_TUNNEL_MODE_WIREGUARD;
+    else if (!g_strcmp0(type_str, "vxlan"))
+        return NETPLAN_TUNNEL_MODE_VXLAN;
+
     return NETPLAN_TUNNEL_MODE_UNKNOWN;
 }
 
@@ -524,6 +528,38 @@ parse_tunnels(GKeyFile* kf, NetplanNetDefinition* nd)
             }
         }
         g_strfreev(keyfile_groups);
+
+    } else if (nd->tunnel.mode == NETPLAN_TUNNEL_MODE_VXLAN) {
+        /* Handle vxlan tunnel */
+
+        nd->vxlan = g_new0(NetplanVxlan, 1);
+        reset_vxlan(nd->vxlan);
+
+        /* Reading the VXLAN ID*/
+        nd->vxlan->vni = g_key_file_get_integer(kf, "vxlan", "id", NULL);
+        _kf_clear_key(kf, "vxlan", "id");
+
+        nd->tunnel.local_ip = g_key_file_get_string(kf, "vxlan", "local", NULL);
+        _kf_clear_key(kf, "vxlan", "local");
+        nd->tunnel.remote_ip = g_key_file_get_string(kf, "vxlan", "remote", NULL);
+        _kf_clear_key(kf, "vxlan", "remote");
+    } else {
+        /* Handle all the other types of tunnel */
+
+        nd->tunnel.mode = g_key_file_get_integer(kf, "ip-tunnel", "mode", NULL);
+
+        /* We don't want to automatically accept new types of tunnels introduced by Network Manager */
+        if (nd->tunnel.mode >= NETPLAN_TUNNEL_MODE_NM_MAX) {
+            nd->tunnel.mode = NETPLAN_TUNNEL_MODE_UNKNOWN;
+            return;
+        }
+
+        _kf_clear_key(kf, "ip-tunnel", "mode");
+
+        nd->tunnel.local_ip = g_key_file_get_string(kf, "ip-tunnel", "local", NULL);
+        _kf_clear_key(kf, "ip-tunnel", "local");
+        nd->tunnel.remote_ip = g_key_file_get_string(kf, "ip-tunnel", "remote", NULL);
+        _kf_clear_key(kf, "ip-tunnel", "remote");
     }
 }
 
@@ -586,13 +622,6 @@ netplan_parser_load_keyfile(NetplanParser* npp, const char* filename, GError** e
     g_free(tmp_str);
     nd = netplan_netdef_new(npp, nd_id, nd_type, NETPLAN_BACKEND_NM);
 
-    if (nd_type == NETPLAN_DEF_TYPE_TUNNEL) {
-        nd->tunnel.mode = tunnel_mode_from_str(type);
-    }
-
-    /* Handle tunnels */
-    parse_tunnels(kf, nd);
-
     /* Handle uuid & NM name/id */
     nd->backend_settings.uuid = g_strdup(uuid);
     _kf_clear_key(kf, "connection", "uuid");
@@ -612,13 +641,19 @@ netplan_parser_load_keyfile(NetplanParser* npp, const char* filename, GError** e
     }
     g_free(tmp_str);
 
+    /* Handle tunnels */
+    if (nd_type == NETPLAN_DEF_TYPE_TUNNEL) {
+        nd->tunnel.mode = tunnel_mode_from_str(type);
+        parse_tunnels(kf, nd);
+    }
+
     /* remove supported values from passthrough, which have been handled */
     if (   nd_type == NETPLAN_DEF_TYPE_ETHERNET
         || nd_type == NETPLAN_DEF_TYPE_WIFI
         || nd_type == NETPLAN_DEF_TYPE_MODEM
         || nd_type == NETPLAN_DEF_TYPE_BRIDGE
         || nd_type == NETPLAN_DEF_TYPE_BOND
-        || nd->tunnel.mode != NETPLAN_TUNNEL_MODE_UNKNOWN)
+        || (nd_type == NETPLAN_DEF_TYPE_TUNNEL && nd->tunnel.mode != NETPLAN_TUNNEL_MODE_UNKNOWN))
         _kf_clear_key(kf, "connection", "type");
 
     /* Handle match: Netplan usually defines a connection per interface, while
diff --git a/src/validation.c b/src/validation.c
index 637e50b..3939e04 100644
--- a/src/validation.c
+++ b/src/validation.c
@@ -313,16 +313,9 @@ validate_tunnel_backend_rules(const NetplanParser* npp, NetplanNetDefinition* nd
                 case NETPLAN_TUNNEL_MODE_GRE:
                 case NETPLAN_TUNNEL_MODE_IP6GRE:
                 case NETPLAN_TUNNEL_MODE_WIREGUARD:
-                    break;
-
                 case NETPLAN_TUNNEL_MODE_GRETAP:
                 case NETPLAN_TUNNEL_MODE_IP6GRETAP:
-                    return yaml_error(npp, node, error,
-                                      "%s: %s tunnel mode is not supported by NetworkManager",
-                                      nd->id,
-                                      g_ascii_strup(netplan_tunnel_mode_name(nd->tunnel.mode), -1));
                     break;
-
                 default:
                     if (nd->tunnel.input_key)
                         return yaml_error(npp, node, error, "%s: 'input-key' is not required for this tunnel type", nd->id);
