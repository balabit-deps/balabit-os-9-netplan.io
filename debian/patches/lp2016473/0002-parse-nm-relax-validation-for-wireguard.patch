From: Danilo Egea Gondolfo <danilo.egea.gondolfo@canonical.com>
Date: Wed, 17 May 2023 15:21:45 +0100
Subject: parse-nm: relax validation for wireguard

Bug: https://bugs.launchpad.net/netplan/+bug/2016473
Origin: https://github.com/canonical/netplan/commit/ec6189d

Netplan doesn't allow partial Wireguard configuration while Network
Manager does. The original Netplan's behavior will not allow NM to
build a WG connection in separate steps.
---
 src/nm.c         | 70 +++++++++++++++++++++++++++++---------------------------
 src/validation.c | 39 ++++++++++++++++---------------
 2 files changed, 57 insertions(+), 52 deletions(-)

diff --git a/src/nm.c b/src/nm.c
index a7e6b4c..edc9128 100644
--- a/src/nm.c
+++ b/src/nm.c
@@ -330,51 +330,53 @@ write_bridge_params(const NetplanNetDefinition* def, GKeyFile *kf)
 static gboolean
 write_wireguard_params(const NetplanNetDefinition* def, GKeyFile *kf, GError** error)
 {
-    g_assert(def->tunnel.private_key);
-
     /* The key was already validated via validate_tunnel_grammar(), but we need
      * to differentiate between base64 key VS absolute path key-file. And a base64
      * string could (theoretically) start with '/', so we use is_wireguard_key()
      * as well to check for more specific characteristics (if needed). */
-    if (def->tunnel.private_key[0] == '/' && !is_wireguard_key(def->tunnel.private_key)) {
-        g_set_error(error, G_MARKUP_ERROR, G_MARKUP_ERROR_INVALID_CONTENT, "%s: private key needs to be base64 encoded when using the NM backend\n", def->id);
-        return FALSE;
-    } else
-        g_key_file_set_string(kf, "wireguard", "private-key", def->tunnel.private_key);
+    if (def->tunnel.private_key) {
+        if (def->tunnel.private_key[0] == '/' && !is_wireguard_key(def->tunnel.private_key)) {
+            g_set_error(error, G_MARKUP_ERROR, G_MARKUP_ERROR_INVALID_CONTENT, "%s: private key needs to be base64 encoded when using the NM backend\n", def->id);
+            return FALSE;
+        } else
+            g_key_file_set_string(kf, "wireguard", "private-key", def->tunnel.private_key);
+    }
 
     if (def->tunnel.port)
         g_key_file_set_uint64(kf, "wireguard", "listen-port", def->tunnel.port);
     if (def->tunnel.fwmark)
         g_key_file_set_uint64(kf, "wireguard", "fwmark", def->tunnel.fwmark);
 
-    for (guint i = 0; i < def->wireguard_peers->len; i++) {
-        NetplanWireguardPeer *peer = g_array_index (def->wireguard_peers, NetplanWireguardPeer*, i);
-        g_assert(peer->public_key);
-        g_autofree gchar* tmp_group = g_strdup_printf("wireguard-peer.%s", peer->public_key);
-
-        if (peer->keepalive)
-            g_key_file_set_integer(kf, tmp_group, "persistent-keepalive", peer->keepalive);
-        if (peer->endpoint)
-            g_key_file_set_string(kf, tmp_group, "endpoint", peer->endpoint);
-
-        /* The key was already validated via validate_tunnel_grammar(), but we need
-         * to differentiate between base64 key VS absolute path key-file. And a base64
-         * string could (theoretically) start with '/', so we use is_wireguard_key()
-         * as well to check for more specific characteristics (if needed). */
-        if (peer->preshared_key) {
-            if (peer->preshared_key[0] == '/' && !is_wireguard_key(peer->preshared_key)) {
-                g_set_error(error, G_MARKUP_ERROR, G_MARKUP_ERROR_INVALID_CONTENT, "%s: shared key needs to be base64 encoded when using the NM backend\n", def->id);
-                return FALSE;
-            } else {
-                g_key_file_set_value(kf, tmp_group, "preshared-key", peer->preshared_key);
-                g_key_file_set_uint64(kf, tmp_group, "preshared-key-flags", 0);
+    if (def->wireguard_peers) {
+        for (guint i = 0; i < def->wireguard_peers->len; i++) {
+            NetplanWireguardPeer *peer = g_array_index (def->wireguard_peers, NetplanWireguardPeer*, i);
+            g_assert(peer->public_key);
+            g_autofree gchar* tmp_group = g_strdup_printf("wireguard-peer.%s", peer->public_key);
+
+            if (peer->keepalive)
+                g_key_file_set_integer(kf, tmp_group, "persistent-keepalive", peer->keepalive);
+            if (peer->endpoint)
+                g_key_file_set_string(kf, tmp_group, "endpoint", peer->endpoint);
+
+            /* The key was already validated via validate_tunnel_grammar(), but we need
+             * to differentiate between base64 key VS absolute path key-file. And a base64
+             * string could (theoretically) start with '/', so we use is_wireguard_key()
+             * as well to check for more specific characteristics (if needed). */
+            if (peer->preshared_key) {
+                if (peer->preshared_key[0] == '/' && !is_wireguard_key(peer->preshared_key)) {
+                    g_set_error(error, G_MARKUP_ERROR, G_MARKUP_ERROR_INVALID_CONTENT, "%s: shared key needs to be base64 encoded when using the NM backend\n", def->id);
+                    return FALSE;
+                } else {
+                    g_key_file_set_value(kf, tmp_group, "preshared-key", peer->preshared_key);
+                    g_key_file_set_uint64(kf, tmp_group, "preshared-key-flags", 0);
+                }
+            }
+            if (peer->allowed_ips && peer->allowed_ips->len > 0) {
+                const gchar* list[peer->allowed_ips->len];
+                for (guint j = 0; j < peer->allowed_ips->len; ++j)
+                    list[j] = g_array_index(peer->allowed_ips, char*, j);
+                g_key_file_set_string_list(kf, tmp_group, "allowed-ips", list, peer->allowed_ips->len);
             }
-        }
-        if (peer->allowed_ips && peer->allowed_ips->len > 0) {
-            const gchar* list[peer->allowed_ips->len];
-            for (guint j = 0; j < peer->allowed_ips->len; ++j)
-                list[j] = g_array_index(peer->allowed_ips, char*, j);
-            g_key_file_set_string_list(kf, tmp_group, "allowed-ips", list, peer->allowed_ips->len);
         }
     }
     return TRUE;
diff --git a/src/validation.c b/src/validation.c
index 5423743..637e50b 100644
--- a/src/validation.c
+++ b/src/validation.c
@@ -199,28 +199,31 @@ static gboolean
 validate_tunnel_grammar(const NetplanParser* npp, NetplanNetDefinition* nd, yaml_node_t* node, GError** error)
 {
     if (nd->tunnel.mode == NETPLAN_TUNNEL_MODE_UNKNOWN)
-        return yaml_error(npp, node, error, "%s: missing 'mode' property for tunnel", nd->id);
+        return yaml_error(npp, node, error, "%s: missing or invalid 'mode' property for tunnel", nd->id);
 
     if (nd->tunnel.mode == NETPLAN_TUNNEL_MODE_WIREGUARD) {
         if (!nd->tunnel.private_key)
-            return yaml_error(npp, node, error, "%s: missing 'key' property (private key) for wireguard", nd->id);
-        if (nd->tunnel.private_key[0] != '/' && !is_wireguard_key(nd->tunnel.private_key))
+            g_warning("%s: missing 'key' property (private key) for wireguard", nd->id);
+        if (nd->tunnel.private_key && nd->tunnel.private_key[0] != '/' && !is_wireguard_key(nd->tunnel.private_key))
             return yaml_error(npp, node, error, "%s: invalid wireguard private key", nd->id);
-        if (!nd->wireguard_peers || nd->wireguard_peers->len == 0)
-            return yaml_error(npp, node, error, "%s: at least one peer is required.", nd->id);
-        for (guint i = 0; i < nd->wireguard_peers->len; i++) {
-            NetplanWireguardPeer *peer = g_array_index (nd->wireguard_peers, NetplanWireguardPeer*, i);
-
-            if (!peer->public_key)
-                return yaml_error(npp, node, error, "%s: keys.public is required.", nd->id);
-            if (!is_wireguard_key(peer->public_key))
-                return yaml_error(npp, node, error, "%s: invalid wireguard public key", nd->id);
-            if (peer->preshared_key && peer->preshared_key[0] != '/' && !is_wireguard_key(peer->preshared_key))
-                return yaml_error(npp, node, error, "%s: invalid wireguard shared key", nd->id);
-            if (!peer->allowed_ips || peer->allowed_ips->len == 0)
-                return yaml_error(npp, node, error, "%s: 'allowed-ips' is required for wireguard peers.", nd->id);
-            if (peer->keepalive > 65535)
-                return yaml_error(npp, node, error, "%s: keepalive must be 0-65535 inclusive.", nd->id);
+        if (!nd->wireguard_peers || nd->wireguard_peers->len == 0) {
+            g_warning("%s: at least one peer is required.", nd->id);
+        } else {
+            for (guint i = 0; i < nd->wireguard_peers->len; i++) {
+                NetplanWireguardPeer *peer = g_array_index (nd->wireguard_peers, NetplanWireguardPeer*, i);
+
+                if (!peer->allowed_ips || peer->allowed_ips->len == 0)
+                    g_warning("%s: 'allowed-ips' is required for wireguard peers.", nd->id);
+                if (peer->keepalive > 65535)
+                    return yaml_error(npp, node, error, "%s: keepalive must be 0-65535 inclusive.", nd->id);
+
+                if (!peer->public_key)
+                    return yaml_error(npp, node, error, "%s: a public key is required.", nd->id);
+                if (!is_wireguard_key(peer->public_key))
+                    return yaml_error(npp, node, error, "%s: invalid wireguard public key", nd->id);
+                if (peer->preshared_key && peer->preshared_key[0] != '/' && !is_wireguard_key(peer->preshared_key))
+                    return yaml_error(npp, node, error, "%s: invalid wireguard shared key", nd->id);
+            }
         }
         return TRUE;
     } else {
